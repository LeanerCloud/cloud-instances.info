name: create-ephemeral-environment-for-pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    # Only run this job when the PR is opened/synchronized/reopened, not when closed
    if: github.event.action != 'closed'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install en_US.UTF-8 locale
        run: |
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen en_US.UTF-8
          sudo update-locale LANG=en_US.UTF-8

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Set up environment variables
        run: |
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
          echo "ENV_NAME=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV
          echo "BUCKET_NAME=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV
          echo "SUBDOMAIN=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Setup Python for building the site
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libxml2-dev libxslt1-dev libssl-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build site
        run: invoke build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'

      - name: Initialize Terraform
        working-directory: infra/terraform/cloudflare_env
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          terraform workspace new pr-${{ github.event.number }} || terraform workspace select  pr-${{ github.event.number }}

      - name: Terraform apply
        working-directory: infra/terraform/cloudflare_env
        id: apply
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          terraform apply -auto-approve \
            -var="cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="bucket_name=${{ env.BUCKET_NAME }}" \
            -var="domain_name=cloud-instances.info" \
            -var="subdomain=${{ env.SUBDOMAIN }}" \
            -var="bucket_location=auto"
          # Save the terraform output to use in subsequent steps
          terraform output -json > tf_output.json
          echo "website_url=$(cat tf_output.json | jq -r '.website_url.value')" >> $GITHUB_ENV

      - name: Add PR comment with preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Preview environment deployed successfully!\n\nðŸ”— [Preview URL](${{ env.website_url }})\n\nEnvironment will be destroyed when the PR is closed.`
            })

  teardown-environment:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.3

      - name: Set environment variables
        run: |
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
          echo "ENV_NAME=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV
          echo "BUCKET_NAME=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV
          echo "SUBDOMAIN=cloud-instances-info-pull-request-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        working-directory: infra/terraform/cloudflare_env
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          terraform workspace select pr-${{ github.event.number }}

      - name: Destroy PR environment
        working-directory: infra/terraform/cloudflare_env
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "Tearing down environment for pull request ${{ github.event.number }}"
          terraform destroy -auto-approve \
            -var="cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="bucket_name=${{ env.BUCKET_NAME }}" \
            -var="domain_name=cloud-instances.info" \
            -var="subdomain=${{ env.SUBDOMAIN }}" \
            -var="bucket_location=auto"

      - name: Add PR comment about environment destruction
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§¹ Preview environment has been successfully destroyed.`
            })
