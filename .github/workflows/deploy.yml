name: Build and Deploy EC2 and Azure Instances to Cloudflare R2
on:
  push:
    branches:
      - master
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '33 * * * *' # Run every day 09:00 UTC to ensure data is updated frequently

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install en_US.UTF-8 locale
        run: |
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen en_US.UTF-8
          sudo update-locale LANG=en_US.UTF-8

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      # Set up Python for building the sites
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Install dependencies and build site
      - name: Build
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libxml2-dev libxslt1-dev libssl-dev
          python -m pip install --upgrade pip
          python3 -m venv env
          source env/bin/activate
          pip install -r requirements.txt
          # Add --refresh-data only for cron-triggered builds
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
          invoke build --refresh-data
          else
          invoke build
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Setup Terraform and create infrastructure with @ subdomain
      - name: Initialize Terraform
        working-directory: infra/terraform/cloudflare_environment
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          terraform workspace new production || terraform workspace select production

      # Check if environment already exists and redirects correctly
      - name: Check if environment already exists and redirects
        id: check_redirect
        run: |
          DOMAIN="cloud-instances.info"
          WEBSITE_URL="https://$DOMAIN"
          echo "Checking if $WEBSITE_URL exists and redirects from / to /index.html"

          # Check if the URL exists and if it redirects
          REDIRECT_CHECK=$(curl -s -o /dev/null -w "%{http_code}\n%{redirect_url}\n" "$WEBSITE_URL" || echo "Error")

          HTTP_CODE=$(echo "$REDIRECT_CHECK" | head -n 1)
          REDIRECT_URL=$(echo "$REDIRECT_CHECK" | tail -n 1)

          echo "HTTP Code: $HTTP_CODE"
          echo "Redirect URL: $REDIRECT_URL"

          # Set the output based on the check
          if [[ "$HTTP_CODE" == "30"* && "$REDIRECT_URL" == *"/index.html" ]]; then
            echo "SKIP_APPLY=true" >> $GITHUB_ENV
            echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV
            echo "Environment already exists and redirects correctly"
          else
            echo "SKIP_APPLY=false" >> $GITHUB_ENV
            echo "Environment doesn't exist or doesn't redirect correctly"
          fi

      - name: Terraform apply
        working-directory: infra/terraform/cloudflare_environment
        id: apply
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        if: env.SKIP_APPLY != 'true'
        run: |
          terraform apply -auto-approve \
            -var="cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="bucket_name=${{ secrets.R2_BUCKET_NAME }}" \
            -var="domain_name=cloud-instances.info" \
            -var="subdomain=@" \
            -var="bucket_location=eeur"
          # Save the terraform output
          terraform output -json > tf_output.json

      # Create output file even if skipped apply
      - name: Create empty output file if skipped apply
        if: env.SKIP_APPLY == 'true'
        working-directory: infra/terraform/cloudflare_environment
        run: |
          echo "Skipping Terraform apply because the site was previously deployed"

      # Deploy site to R2
      - name: Deploy
        env:
          # Common configuration
          BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          source env/bin/activate
          invoke deploy

      # Clear Cloudflare cache to ensure latest content is served
      - name: Purge Cloudflare cache
        if: success()
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
